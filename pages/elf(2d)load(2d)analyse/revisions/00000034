= elf-load-analyse =
 *内存分配两阶段
== 还要作 ==
 *elf载入
 *binprm
 *formats
 *图
== 问题 ==
 *c语言申明static有什么用
== 引论 ==
 *HELLO WORLD 大家都会, 但为了这简单的几行代码运行起来, 需要很多的工作.
 *大家都知道在SHELL里敲比如ls之类的命令, SHELL并不是执行自身的代码, 而是调用外部的程序文件来进行处理, 比如/bin/ls文件. linux下很重要的一个概念就是文件, 你的可执行程序是以文件形式进行保存的, 文件是要别的程序去读它, 那是什么使这被动的文件动起来的?
 *进一步到API级别, 大家写过的自己的SHELL里, 肯定有这样一对函数 fork()和 exec*() 大家知道fork()函数会创建一个同样的进程, 但exec*()这函数和一般的函数有很大的不同, 这函数只要一调用成功就不会返回, 而是使进程变为一新的程序, 这中间到底发生了什么?
 *大家对main(int argc, char* argv[])的声明, 这和其他函数的声明方法相同, 但是 main()函数是最先被调用的函数, 这参数是在exec*()中指定, 但exec*()是将整个进程换了一遍, 这些参数是怎么传递的?
{{{#! cplusplus
lian@M77:~/workspace/linux内核与编程/论文$ file hello
hello: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), for GNU/Linux 2.6.8, dynamically linked (uses shared libs), not stripped
}}}
 *file是如何识别出ELF文件的?
 *ELF大家肯定有所听闻, 上面的但到底是怎么用ELF表示一程序的?
{{{#! cplusplus
lian@M77:~/workspace/linux内核与编程/论文$ ldd hello
	linux-gate.so.1 =>  (0xb80fc000)
	libc.so.6 => /lib/tls/i686/cmov/libc.so.6 (0xb7f70000)
	/lib/ld-linux.so.2 (0xb80e2000)
}}}
 */lib/ld-linux.so.2 是动态链接器, 其他是动态链接库, 它们到底是如何实现的?
 *这一切都要到内核中去, 最佳的入口点就是exec*()这神秘的系统调用.
== execve总的执行过程 ==
 1. 系统调用execve() 用户态
  1. 陷入内核对应的sys_execve() 内核态
   1. do_execve()
    1. prepare_binprm()
    1. search_binary_handler()
     1. 调用对应格式的加载函数如load_elf_binary()
 1. 进入动态链接器入口 用户态
  1. 装载动态链接库
 1. 程序的入口
 *到search_binary_handler()是第一部分 这是总的一般的装载过程 和架构有关 但和文件格式无关
 *相应的elf相关的load_elf_binary()load_elf_interp()create_elf_tables() 对应于elf格式的装载过程
 *动态链接器以后的代码不涉及 是libc的内容
 *内存管理相关的概略说明
 *进程调度相关的概略说明
== 代码和注释 ==
 *[[elf-load-analyse/sys_execve()|sys_execve()]]
 *[[elf-load-analyse/do_execve()|do_execve()]]
 *[[elf-load-analyse/prepare_binprm()|prepare_binprm()]]
 *[[elf-load-analyse/search_binary_handler()|search_binary_handler()]]
 *[[elf-load-analyse/copy_strings()|copy_strings()]]
 *[[elf-load-analyse/count()|count()]]
== 文件地址 ==
 */arch/i386/kernel/process.c: 
 */fs/exec.c
== 杂 ==
 ＊内核版本 2.6.7
  *i386架构
  *单CPU
  *工具 file ldd strace

== 一般执行过程 ==
 1. [[elf-load-analyse/sys_execve()|sys_execve()]]
   1. [[elf-load-analyse/do_execve()|do_execve()]]
    1. [[elf-load-analyse/prepare_binprm()|prepare_binprm()]]
    1. [[elf-load-analyse/search_binary_handler()|search_binary_handler()]]
== 参数和环境变量的传递 ==
== elf格式载入 ==
== 动态链接 ==
  *execve()中 有ld
  *execve()后 系统调用动态链接库 
== 相关内容 ==
该 process 执行系统调用 execve(),也就是你看到的 strace 输出的第一行
execve("./hello", ["./hello"], [/* 22 vars */]) = 0。由于无论是读取文件,还是文件映
射(File Mapping)都发生在 Kernel 里,所以 strace 不能监控到这一步的任何东
西。本文要分析的即是该过程。
 2. 系统调用 execve()以后, process 的真正入口被设置成动态链接器的入口该(如
果是静态链接的话,就比较简单,设置的入口就是该可执行文件 hello 的入口).
当该新 process 返回到用户态(也就是从 execve 执行完后从内核态返回到用户态,不是对该函数调用的返回。因为只有该函数调用失败才会有返回,成功的话,就进入了另一个“世界”,控制转移到动态链接器(/lib/ld-2.3.4.so))。
