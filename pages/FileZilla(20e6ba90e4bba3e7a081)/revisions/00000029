= FileZilla 源代码 =
 *界面使用[[WxWidgets|WxWindows]]
 *主要目录
  *engine 后台 逻辑引擎
  *Interface 接口
   *resources 资源文件
   *settings 设置接口
  *putty 使用putty文件改的用于生产 fzputtygen.exe fzsftp.exe
  *fzshellext 用于Window的shell扩展用 实现拖放支持功能
  *dbus 用于Linux下的dbus工具库
  *tinyxml 用于解析xml的工具库
 *Windows版本要用mingw来构造
 *使用的是Autotool进行构建的
 *WxWindows和MFC非常相像
 *CLogging实现日志功能
 *CRateLimiter实现速度限制 使用Token Bucket算法
 *CContextManager CState CStateEventHandler在state.h 和 state.cpp中
 *CIOThread CSocketThread 继承了WxThreadEx
 *CTlsSocket CSocket  CTransferSocket CProxySocket CFtpControlSocket CControlSocket CHttpControlSocket
 *CBackend 继承 CRateLimiterObject
 *wxThreadEx是项目中所有线程的基类
 *CSocket可能是个公共的接口，具体由地下的具体CSocket派生类来执行
 *CLocalPath用来封装本地路径 隔离Windows和Linux的路径表示区别
 *CLocalFileSystem用来封装文件系统的区别
 *CServer用来封装Server
 *CServerPath封装Server的路径
 *CDirentry CDirectoryListing用来封装目录项
 *CState给界面提供接口
 *CRecursiveOperation 实现 CStateEventHandler
 *CPowerManagement防止系统进入idle sleep 实现 CStateEventHandler
 *CSearchDialog 实现 CStateEventHandler
 *可以使用spy++来查看窗口和线程
 *一开始就有三个线程 一个线程拥有窗口循环队列
 *错误处理使用返回值
 *include文件夹中enum ServerProtocol定义支持的协议
 *include文件夹中logging.h  enum ServerProtocol定义支持的协议
 *engine文件夹中proxy.h  enum ProxyType定义支持的代理协议
 *逻辑层要应付界面所用可能的操作 要保证自己状态的正确
 *CSocketEventDispatcher使用了独子模式
 *线程只是用来等待需要等待的事件 然后通知主线程 做主要事情的还是主线程
 *CRateLimiterObject -> CBackend -> CSocketBackend 用于进行速度控制
 *各种Socket类型 对应的是不同的交流过程
== CMainFrame ==
 *在interface文件夹中的Mainfrm.h中定义 在Mainfrm.cpp中实现
 *表示总的面板
 *有一个CContextControl的指针
 *m_pQueueLogSplitter是干什么的
== CContextControl ==
 *在interface文件夹中的context_control.h中定义 在context_control.cpp中实现
 *继承wsSplitterWindow 和 CStateEventHandler
 *struct _context_controls
  *对应界面上中间的那一块 本地站点 和 远程站点
  *使用三个CSplitterWindowEx来分隔成4个区域
 *有一个struct _context_controls队列
 *wxAuiNotebookEx* m_tabs 可能是多服务器显示上面的标签页(tab页)
== COptions ==
 *COptions使用了独子模式
 *COptions用于保存用户当前的输入以便下次对话框显示用户的输入的值 偏好特性
== CCommandQueue ==
 *在interface文件夹commandqueue.h中定义 在interface文件夹commandqueue.cpp中实现
 *CCommandQueue将命令排成序列进行处理
 *ProcessCommand()
  *为什么只有size == 1才处理命令
== CCommand ==
 *CCommand在include文件夹中的commands.h中定义 在engine文件夹中的commands.cpp中实现
 *作为逻辑部分和界面的接口
 *commands.h中定义CConnectCommand CDisconnectCommand CCancelCommand CListCommand CFileTransferCommand CRawCommand CDeleteCommand CRemoveDirCommand CMkdirCommand CRenameCommand CChmodCommand和相关的enum Command相对应
 *commands.h还实现了识别功能 可能是C++缺乏相关的支持
 *这些命令被CFileZillaEngine的Command()进行
== CContextManager ==
 *在interface文件夹中state.h中定义 在interface文件夹state.cpp中实现
 *CContextManager使用单件模式
 *在interface文件夹的state.h中定义 在state.cpp中实现
 *使用Static变量的静态初始化 和 Java的不同
 *使用Get()Static方法来获得CContextManager的唯一变量
 *CContextManager里面有包含对于各种状态的处理器的list的数组指针
 *Context到底是干什么用的
 *Context是一个CState变量
 *STATECHANGE_NONE将所有列表里相同侦听都删除
 *current_only只有CurrentContext和侦听的pState相等才通知
 *blockable到底是什么含义
 *CurrentContext代表当前界面可以控制的交互 因为界面最多只能交互一个
== CState ==
 *在interface文件夹的state.h中定义 在state.cpp中实现
 *代表对一个站点交互的全过程 充当和站点的controller的角色 其逻辑底层是CFileZillaEngine
 *CState中有CreateEngine()
  *创建CFileZillaEngine对象 并调用其Init()
  *创建CCommandQueue对象
 *CState中包含一个CCommandQueue对象 充当命令的队列
 *Connect()函数
  *检查是否有连接 有就终止
  *m_pRecursiveOperation->StopRecursiveOperation()
  *m_pCommandQueue->ProcessCommand(new CConnectCommand(server));
  *m_pCommandQueue->ProcessCommand(new CListCommand(path, _T(""),LIST_FLAG_FALLBACK_CURRENT))
  *SetServer(&server)
== CFileZillaEngine ==
 *engine的入口
 *在engine文件夹FileZillaEngine.cpp 中
 *engine可能使用了线程的技术
 *CFileZillaEnginePrivate是CFileZillaEngine的基类使用完成大部分的逻辑操作CFileZillaEngine只起包装作用
 *CFileZillaEngine在CUpdateWizard和CState中有创建 
 *初始化使用了Init()函数调用
 *Command()
  *使用Command类型的ID来判断Command的类型
  *对应不同的命令调用CFileZillaEnginePrivate类中的方法
== CFileZillaEnginePrivate ==
 *对于需要BLOCK的操作是睡眠还是使用中断？？？
 *在engine文件夹engineprivate.h中定义 在engineprivate.cpp中实现
 *实现了大部分逻辑代码
 *Connect()
  *释放m_pControlSocket
  *拷贝Command
  *判断使用协议和端口是否对应 如果没有对应就写log
  *调用ContinueConnect()
 *ContinueConnect()
  *GetRemainingReconnectDelay() 通过log来计算获得需要delay的时间
  *如果要delay就调用m_retryTimer
  *根据相关的协议生成对用的ControlSocket对象
  *调用m_pControlSocket->Connect(server)
== CControlSocket ==
 *在engine文件夹中的ControlSocket.h中定义 在engine文件夹用的ControlSocket.cpp中实现
 *虚类
 *class CControlSocket: public wxEvtHandler, public CLogging 继承CLogging是为了干什么？？？
 *继承的有 CRealControlSocket
== CRealControlSocket ==
 *在engine文件夹中的controlsocket.h中定义 在engine文件夹用的controlsocket.cpp中实现
 *是用于实现代理功能的吗？？？
 *继承的有CFtpControlSocket CSftpControlSocket CHttpControlSocket
 *Connect()
  *生成wxCSConv对象 用于编码转换
  *生成新的CServer 调用SetHost() 为什么还要自己设置server参数不是拷贝了就好了吗？？？
  *调用ContinueConnect() 虚函数
   *根据是否需要代理进行判断
   *不需代理 m_pSocket->Connect(host, port)
   *m_pProxyBackend m_pBackend到底代表什么？？？
 *CSocket m_pSocket
 *OnSocketEvent() 应该就是这里来处理socket线程发来的消息吧
  *
== CFtpControlSocket ==
 *在engine文件夹中的ftpcontrolsocket.h中定义 在engine文件夹用的ftpcontrolsocket.cpp中实现
 *是否使用回调函数
 *Connect()
  *使用proxy 和 使用哪个proxy
  *设置neededCommands int数组
  *GetLoginSequence(server)
  *CRealControlSocket::Connect(server)
 *GetLoginSequence() 可能是用于来填充发往服务器的命令字节
  *处理是否使用proxy 对于不用的情况使用不同的命令数组
== CSocket ==
 *在include文件夹socket.h中定义 在engine文件夹socket.cpp中实现
 *class CSocket : public CSocketEventSource 估计是事件的发送者
 *CSocketThread* m_pSocketThread
 *在这里进行的线程的同步
 *使用DetachThread()来终止线程
 *使用Cleanup()来处理没有完成的线程队列waiting_socket_threads
 *Connect()
  *如果有线程就唤醒相关的线程
  *如果没有线程就新建线程
  *m_pSocketThread->Connect()
 *DetachThread()
  *获得锁 
  *完成的直接删除
  *没有开始的直接删除
  *没有结束的加到engine文件夹socket.cpp static std::list<CSocketThread*> waiting_socket_threads中
 *Cleanup()
  *获得waiting_socket_threads中的一个thread
  *没完成 如果不是强制删除的话 就继续
  *要不然就等到起完成pThread->Wait() 会不会造成界面卡死？？？
== CSocketThread ==
 *class CSocketThread : protected wxThreadEx
 *在engine文件夹socket.cpp中定义 在engine文件夹socket.cpp中实现
 *估计就是CSocket在用
 *在这里进行的线程的同步
 *这里的线程关闭都是基于同步或者预先定义的步骤进行关闭 没有使用强制关闭
 *Connect()
  *参数验证
  *CSocketThread::Start()
 *Start()
  *如果开始了就 唤醒线程
  *根据平台设置同步对象 
  *int res = Create() wxThreadEx::中
  *Run() wxThreadEx::中 这之后线程就启动了 就需要同步了
  *m_pThread->Run() wxThreadEx::中
 *Entry() 实现了wxThreadEx的虚函数 最为线程的入口
  *Connect状态是CSocket::connecting
  *依据状态机来实现的吧？？？
 *DoConnect() 用来处理链接 要在Locked状态中调用
  *根据是否有getaddrinfo 和 是不是Windows实现进行处理
  *产生SocketEvent 然后 CSocketEventDispatcher::Get().SendEvent(evt)
  *TryConnectHost(addr) CSocketThread中
  *如果失败的话就再产生SocketEvent 然后 CSocketEventDispatcher::Get().SendEvent(evt)
 *TryConnectHost()
  *产生CSocketEvent::hostaddress类型的CSocketEvent
  *socket()产生socket
  *设置socket的选项
  *connect()连接host 但是不会一直等待
  *如果是EINPROGRESS处理中就DoWait()
  *产生CSocketEvent::connection类型的CSocketEvent
 *DoWait()
  *根据平台选择相关的select函数
  *等待时候会释放锁
  *windows下就是等待事件完成了
  *Linux下还有等待m_pipe[0] 这是干什么？？？
 *WakeupThread() 取消select或者空等待
  *如果是线程正在睡眠就 m_condition.Signal() 使用的是wxCondition类型
  *如果是Windows下正在select的话就WSASetEvent()
  *如果是Linux下正在select的话就写m_pipe[1] 那边的Select就中断了
== wxThreadEx wxThreadExImpl ==
 *wxThreadEx 虚基类
 *在include文件夹threadex.h中定义 在threadex.cpp中实现
 *是wxThreadExImpl的包装类
 *class wxThreadExImpl : public wxThread
 *用于解决WxThread中的线程的wait问题
 *线程入口应该是Entry()吧 虚函数
 *Create()
  *m_pThread->Create() wxThreadEx::中
 *Run() 这之后线程就启动了 就需要同步了
  *m_pThread->Run() wxThreadEx::中
== CSocketEventDispatcher ==
 *include文件夹socket.h文件夹中定义 engine文件夹socket.cpp中实现
 *这里处理一个socket线程 通知界面线程完成链接
 *在include文件夹socket.h中定义 在engine文件夹socket.cpp中定义
 *m_pending_events 等待的事件队列
 *SendEvent() 可能是socket线程中用来发送消息给界面线程用的吧
 *ProcessEvent() 由wxEvtHandler继承来的虚函数 用来在界面线程中来处理socket的线程发的消息 可能由系统进行调用
  *取出头一个event
  *调用能处理的Handler进行处理
== CSocket ==
 *friend class CSocketThread
 *class CSocket : public CSocketEventSource
 *和其他的Socket好像没有什么关系
== CRateLimiter ==
 *在engine/ratelimiter.h中定义 在engine/ratelimiter.cpp中实现
 *使用的独子模式 这样来控制总速度
== CRateLimiterObject == 
 *在engine/ratelimiter.h中定义 在engine/ratelimiter.cpp中实现
== CBackend ==
 *在engine/backend.h中定义 在engine/backend.cpp中实现
== CSocketBackend ==
 *在engine/backend.h中定义 在engine/backend.cpp中实现
== 疑问 ==
 *CFileZillaEngine是同一个站点的交互的处理
 *CContextManager应该是充当Controller的角色
 *CStateEventHandler应该相当于是订阅者模式中的观察者的接口
 *CMainFrame代表主界面
 *CMenuBar代表菜单栏
 *CToolBar代表工具栏
 *CQuickconnectBar代表快速链接栏
 *CLed代表底下的灯
 *CUpdateWizard更新助手
 *CFileZillaApp代表FileZilla应用程序
 *CWrapEngine和CFileZillaEngine没有关系
 *CWrapEngine是text wrapping engine
 *CMainFrameStateEventHandler是CMainFrame来侦听CState的类
 *notification.h engine使用通知机制来通知应用
 *使用COptionsBase处理选项
 *CState可能是代表对于每一个Server的处理
== 问题 ==
 *CState和CMainFrame有什么关系
 *有几个线程
 *线程同步如何做的
 *CExternalIPResolver干什么用的
 *CViewHeader CLocalViewHeader CRemoteViewHeader代表什么
 *代理是如何处理的
 *字符编码是如何做到的
 *ProcessEvent() 估计是从 wxEvtHandler中继承来的
== 事件驱动研究 ==
 *[[http://baisongfly.blog.163.com/blog/static/3013511720092752017499/|第三章 在事件驱动环境中工作]]
 *[[http://wenku.baidu.com/view/6c9d5786bceb19e8b8f6ba49.html|wxpython-in-action ]]
 *Event带能处理这个event的handler
 *Source
 *Handler
