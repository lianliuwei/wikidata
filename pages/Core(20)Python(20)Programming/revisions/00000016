= Core Python Programming =
 *看到 232
 *做练习
== 欢迎来到Python世界 ==
 *.py是Python的扩展名
 *.pyc .pyo是编译完的文件
 *#!/bin/env python 可以用于选择python的位置，不知这是什么原理
 *标准版本的 Python 是用 C 来编译的， 又叫 CPython
 *Stackless
== Python起步 ==
 *分语句和表达式
 *使用空格当做代码块
 *print后加，表示不换行 但是会自动添加空格
 *Python Enhancement Proposal
== Python基础 ==
 * 继续( \ )，也有不用就可以直接换行的语句
 *复合语句首行以关键字开始，以冒号( : )结束
 *代码组由不同的缩进分隔
 *没有缩进的代码块是最高层次的，别称做脚本的“main”部分
 *同一行书写多个语句(;)
 *每一个 Python 脚本文件都可以被当成是一个模块
 *赋值语句不会返回值 但是 链式赋值没问题
 *对象是通过引用传递的
 *Python 不支持类似 x++ 或 --x 这样的前置/后置自增/自减运算
 *“多元”赋值
 *多元赋值方式可以实现无需中间变量交换两个变量的值
  *_xxx    不用'from module import *'导入  私有的
  * __xxx__系统定义名字 
  *__xxx   类中的私有变量名
 *可以用属性 obj.__doc__来访问标准注释
 *大部分的Python 模块都是用于导入调用的，直接运行模块 应该调用该模块的回归测试代码。 
 *如果模块是被导入， __name__ 的值为模块名字  如果模块是被直接执行， __name__ 的值为 '__main__'
 *在主程序中放置测试代码是测试模块的简单快捷的手段。
 *unittest 模块， 有时候它被称为 PyUnit, 是一个测试框架。大系统的组件进行正规系统的回规测试可以使用
 *变量和内存管理
  *变量无须指定类型 
  *程序员不用关心内存管理 
  *变量名会被“回收” 
  *del 语句能够直接释放资源
 *使用引用就不会造成C中指针的空指针和引用在对象被删除的情况
 *技巧：使用局部变量替换模块变量
 *异常处理最适用的场合，是在没有合适的函数处理异常状况的时候
 *Debugger: pdb 
 *Logger: logging 
 *Profilers: profile, hotshot, cProfile 
== Python对象 ==
 *Python 对象 
  *身份 使用内建函数id()来得到 可以被认为是该对象的内存地址
  *类型 用内建函数 type()查看 Python 对象的类型 type()返回的也是对象
  *值
 *其他内建类型
  *所有类型对象的类型都是 type，它也是所有 Python 类型的根和所有 Python 标准类的默认元类（metaclass）
  *NoneType类只有一个值， 那就是 None
  *对象的布尔值是 False 
   *None 
   *False (布尔类型) 
   *所有的值为零的数
  *python虚拟机会缓冲整数常量
 *内部类型
  *代码对象
  *帧对象　
  *跟踪记录对象　
  *切片对象　
  *省略对象　
  *XRange 对象 
 *标准类型内建函数　
  *type（）　
  *cmp（）　
  *str（）和repr（）（及``操作符）
   *eval（）可以用reper（）和``来获得原始对象
  *type（）和isinstance（）　
   *types包里有常用type的类型
  *Python类型操作符和内建函数总结
 *类型工厂函数
 *标准类型的分类　
  *存储模型
  *更新模型
  *访问模型
 *不支持的类型
  *仅需要使用一种类型， 就是 Python 的整型
  *Decimals 则拥有任意的精度。在处理金钱这类确定的值时， Decimal 类型就很有用
== 数字 ==
 *数字类型
  *变更数字的值会生成新的对象
  *变量像一个指针指向装变量值的盒子
  *删除一个数值对象的引用， 使用 del 语句
 *整型
  *布尔型 只有True和False两个值
  *标准整数类型 
  *长整型 Python 的长整数类型能表达的数值仅仅与你的机器支持的(虚拟)内存大小有关 用大写字母 “L”表示长整数
  *双精度浮点数
  *复数 复数带有属性
 *运算符
  *类型转换的基本原则是： 整数转换为浮点数， 非复数转换为复数
  *位运算符（只适用于整数） 
 *内建函数与工厂函数 
  *标准类型函数 cmp(), str() 和 type()
  *数字类型函数
   *函数 int(), long(), float() complex() bool()
   *这些内建函数都是类对象 表5.5关于这些函数
   *Python 有五个运算内建函数用于数值运算： abs(), coerce(), divmod(), pow(), pow(),round()
  *仅用于整数的函数
   *进制转换函数 oct()和 hex()
   *ASCII 转换函数 chr()和ord()
 *其他数字类型
  *在数学运算中，Boolean 值的 True 和 False 分别对应于 1 和 0
  *十进制浮点数 
 *相关模块 
  *[[http://numeric.scipy.org/]]
  *[[http://scipy.org/]]
  *decimal 
  *array 
  *math/cmath
  *operator 
  *random
 *表 5.9 总结
== 映像和集合类型 ==
 * 序列
  *为-N - N-1范围
  *成员关系操作符 (in, not in) 
  *切片操作符 ( [], [:], [::] ) 
  *重复操作符 ( * ) 
  *连接操作符( + ) 
  *s[::-1] # 可以视作"翻转"操作 
  *开始和结束素引值可以超过字符串的长度
  *内建函数 list(),str()和 tuple()被用做在各种序列类型之间转换 这些转换实际上是工厂函数 将对象作为参数，并将其内容（浅）拷贝到新生成的对象中
 *字符串
  *双引号和单引号在 Python 里面被视作一样
  *没有字符这个类型
  *从性能的的角度来考虑，把重复操作作为参数放到循环里面进行是非常低效的
  *使用字符串格式化操作符(%)提高性能
  *如果把一个普通字符串和一个 Unicode 字符串做连接处理，Python 会在连接操作前先把普通字符串转化为 Unicode 字符串
  *表 6.4 字符串格式化符号
  *可以使用元组和字典类型作为参数
  *字符串模板
  *原始字符串操作符( r/R ) 
  *Python里面没有C风格的结束字符NUL
  *三引号
 *Unicode
  *真正的对象ASCII 字符串成了 String Type，而 Unicode 字符串成了Unicode Type 类型
  *string 模块已经停止了更新
  *内建的 str()函数和 chr()函数并没有升级成可以处理 Unicode
  *codec是COder/DECoder的首字母组合
  *每当你向一个文件写入字符串的时候，你必须定义一个编码(encoding 参数)
  *除了 pickle 模块 都兼容unicode
  *表 6.10 列出了 Python 标准库里面与字符串有关的主要模块
 *列表
  *extend()方法的一个优点是它实际上是把新列表添加到了原有的列表里面,而不是像连接操作那样新建一个列表
  *列表解析
  *6.13.1列表比较算法
  *len() max() and min() sorted() and reversed() enumerate() and zip()
  *list() and tuple() 接受可迭代对象(比如另一个序列)作为参数,并通过浅拷贝数据来创建一个新的列表或者元组
  *那些可以改变对象值的可变对象的方法是没有返回值的
  *sort()方法,它默认的排序算法是归并排序(或者说"timsort")的衍生算法
  *用列表构建其他数据结构 
   *堆栈 队列
 *元组 
  *用的是圆括号而列表用的是方括号 不可变类型 用做一个字典的key
 *[[http://www.china-pub.com/39969|目录]]
 *[[http://wiki.woodpecker.org.cn/moin/CorePyProgramming|翻译组织官网]]
