= CFrameWnd研究 =
 *CFrameWnd在afxwin.h中定义class
 *CFrameWnd在winfrm.cpp中定义函数
 *CFrameWnd的继承框架: CObject -> CCmdTarget -> CWnd -> CFrameWnd
 *CFrameWnd用来代替WndProc函数
 *CObject在afx.h中定义class
 *CCmdTarget在afxwin.h中定义class
 *CWnd在afxwin.h中定义class
 *afx.h 定义： CObject 异常类 文件类型 CArchive
 *afxwin.h 定义：CGdiObject CDC CWinThread CDocment CView
 *IDispatch 和 CCmdTarget 的关系 
 *CMiniFrameWnd代表什么
== CObject ==
 *处理动态类型
 *处理序列化
 *重载了new 和 delete 大概就是从这里判断内存申请释放是否异常
== CCmdTarget ==
 *显然知道CView和CFrameWnd
 *有为了支持Ole和COM的方法
== CWnd ==
 *包装HWND句柄
 *设置字体
 *坐标转换
 *DC函数
 *Timer功能
 *ToolTip功能
 *Capture功能
 *Dlg功能
 *Scorll功能
 *Clipboard
 *Caret功能
 *Icon功能
 *Context Help功能 ？？？
 *DDX 功能
 *Help功能 F1键等
 *Accessibility功能 使用IAccessibleProxy
  *定义XAccessible 和 XAccessibleServer
 *窗口管理功能
 *一堆On函数响应
 *Ole支持
 *定义了模板函数EnlargeBufferGetText
== CFrameWnd ==
 *Create() 函数
 *LoadFrame() 函数
 *CreateView() 函数
 *GetActiveView() SetActiveView()
 *GetActiveFrame() 用于MDI
 *SetTitle() GetTitle() SetMenu() GetMenu()
 *Status Bar是什么
 *Bar Docking是什么
 *处理OnContextHelp() OnUpdateControlBarMenu() OnBarCheck()
 *m_nWindow变量 表示相同的类的个数 -1表示未知 0表示唯一 >1表示多窗口中的第几个
 *m_pNextFrameWnd表示程序全局的FrameWnd链表 管理函数AddFrameWnd() RemoveFrameWnd()
 *Docking可能是用于控件的布局
 *可能只有一个Active窗口
 *Debug版本会定义AssertValid()和 Dump()
 *CFrameWnd中为什么有那么多的friend class
=== Dock Bar ===
 *在FrameWnd的上下左右都可以有一个船坞窗口，这个船坞窗口就是你的TOOLBAR停靠的地方。然后当你把TOOLBAR从船坞窗口上拖下的时候，系统会自动创建一个CMiniFrameWnd(类名好象是这个)，并把ToolBar设置为它的子窗口，这个CMiniFrameWnd就是可以在界面里漂浮的窗口。 
 *想必Windows和MFC为了支持其拖动Bar的功能肯定是煞费苦心了
 *[[http://blog.csdn.net/codewarrior/archive/2006/09/04/1175211.aspx|MFC控制条窗口布局原理]]
