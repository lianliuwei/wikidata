= GNU Autoconf, Automake, and Libtool =
 *三部分： 历史 使用 高级特性
 *入门书籍
== Introduction ==
 *Autoconf用于配置
 *Automake用于构建
 *Libtool用于生产库文件
== History ==
 *都是为了解决相应问题而生的
== How to run configure and make ==
 *构建最好有三棵树：a source tree, a build tree and an install tree.
 *运行configure要可以添加参数，有很多常见的参数
 *configure会产生相应的生成文件，有很多常见的生成
 *使用configure产生文件的原文件一般后缀为.in
 *使用make有很多常见的Target
 *Configuration Names用来标示运行环境，由cpu-manufacturer-operating_system组成
 *编译平台选项有build host target决定，host决定生成软件运行环境，target决定生成软件工作目标，多用于交叉编译器
== Introducing `Makefile's ==
 *makefile有很多隐示规则
 *shell指令是在单独的shell里执行的
 *命令开头用<tab>
 *marco是make的一大功能，marco也是相当的复杂的
 *后缀规则不必具体的编写文件名
== A Minimal GNU Autotools Project ==
 *小工程：C语言解释器
 *需要提供两个文件 makefile.am configure.in
 *相关的文件生成非常多，要多加了解
 *修改文件怎么同步
  *运行相关文件
  *使用autoreconf
  *使用automake的maintainer mode
 *对大众最好发布产生成的配置文件
 *ChangeLog带有格式
== Writing `configure.in' ==
 *保证移植性很有挑战
 *使用尝试验证方法进行移植
 *检查顺序
  1. Boilerplate
  1. Options
  1. Programs
  1. Libraries
  1. Headers
  1. Typedefs and structures
  1. Functions
  1. Output
 *容易检查过多或者过少
 *对付函数的移植
  *使用替代函数
  *使用相同功能但名字不同的函数
  *将其作为一种选项
 *依赖configure name的配置要小心 多用features测试
== Introducing GNU Automake ==
 *Automake的目标是产生符合标准的makefile
 *主要帮助完成
  *Build
  *Check
  *Clean
  *Install and uninstall
  *Distribution 
== Generated File Dependencies ==
 *都会使用到m4宏
 *只和开发有关
  *aclocal
  *autoheader 
  *automake and libtoolize
 *和开发和安装有关
  *autoconf
  *make
