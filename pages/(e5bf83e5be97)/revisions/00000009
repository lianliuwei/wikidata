= 心得 =
 *用快捷键和相应的技术提高电脑的效率 最为常用的操作优先
 *小心电脑
 *通过软件来学习其它学科 如通过企业软件来学习企业运作
 *编辑软件也很复杂
== 编程 ==
 *缓冲技术很常见 速度有差距就要用这个技术
 *程序的级别:能运行-》有效率  只有能运行的程序才有可能讲效率
 *文件开就要关 文件和资源的必备模式
 *编程的名字分析 从代码的名字入手很有效果 对词要敏感

 *编程中观点很重要
 *知道程序的实现 对能力帮助很大
 *异常是给想要处理的人处理
 *不要抄代码 容易出错

 *资源就是要描述 不然这么知道资源
 *学这么多的软件技巧的目的是为了造更好的软件 高一层的目的
 *以安全的角度看代码 有很多内容
 *通过具体的生活事情来学习编程
== 学习 ==
 *要写读书报告 人要逼才能学会
 *要刻苦
 *了解你的工具 熟悉工具很重要
 *要经常回顾和检查 不回顾不然学到真东西
 *学习最多以两个小时为单位 
  *学过两个小时就要换不同的项目来做 不然学习效率非常的低 几乎不思考
 *很多事情放弃了就得从头再来 
  *从我所有的失败的经历来看，这是一条真理
 *看视频容易缺乏思考
  *视频信息量太多，不便于快速浏览，容易丧失思考
 *阅读能力的重要性
  *最终目的:了解作者的目的 同时增加你的思考
 *[[个人管理]]很重要
 *思考能力的重要性
  *没有思考 没有人
 *学习是要有驱动的
  *有目标的驱动才是学习的本质 不要为学而学 特别是在这一个知识过剩的年代
 *知识过剩问题
  *不要过分的追求知识的充分 这是不可能达到的 
  *不要天天搜索 
  *网页的信息含量参差不齐
 *重视实践 没有实践没有工程
 *网络上找志同道合的人交流 不论学习还是玩 有人一起就是不错
 *自己动手写代码 一定要动手写代码才能学到真东西
 *记录实验过程 实验完一点要写报告， 不然没有一点价值
 *戒骄戒躁
 *要勤快点 我很懒
 *不要成为书虫
 *不要停止思考
 *知道-模仿-了解-思考-创新 知识工作的基本步骤
 *可以打印一些电子资料出来 长期看电脑不好
 *阅读—记录－思考—实验 可参考学习计划
 *多问问题 如这个 想想看这接口为什么要怎么设计 可以加强理解 
 *工程项目不能太多一起做 会使人厌恶
 *分析是推导的逆过程
 *可以使用《linux内核剖析》的方法进行学习
 *不强硬人就不思考
 *写代码不一定会有收获 但不写代码一定没有收获
 *集中你的注意力 注意力是一切创造的源泉
 *以章节为单位来学习 不要一下学很多和长期不学
 *多向度的思考
 *分解法和实验式写程序法 对于不会的技术可以这么来
 *建模型学习法 如[[UULP]]
 *练习式学习 如[[UULP]]
 *标本之道 要区别
 *内容联系法 如 c语言的物理实现是什么样的 很有用
 *课程项目的整理的方法: doc以文档和源码为主 课件和实验和作业单独列出
 *国外大学项目有利于学习
 *看百科学习
 *论文库可以用来入门
== 生活 ==
 *褪色的衣服要单独洗
 *赶完蚊子再睡觉
 *可以使用[[个人管理]]技术来解决混乱的问题 但关键是心态
 *从梦里突然醒来真可怕, 和真实分不清
 *不要用塑料袋
 *夏天睡觉前不能 洗衣服 运动
 *球迷天下在富万邦三楼
 *将肉放土里分解是好方法
 *饮食很重要
 *救地球 要环保
 *用word和记事本装乱码字幕
 *浅睡眠要防止
