= linux可执行程序的执行分析 =

== 要求 ==
 *报告的提交
  1. 报告应提交纸版和电子版
  1. 纸版报告的提交地点：厦门大学海韵校区科研二号楼412/414
  1. 纸版报告提交期限：2009-06-11 09:00~11:20
  1. 电子版请发送到`ydchen@xmu.edu.cn`，邮件标题为“[Linux期末报告]”
  1. 电子版报告提交期限：2009-06-11 12:00
  1. 报告内容的内容要求
  1. 基本内容
   1. 关键数据结构
   1. 主要算法的流程图
   1. 特点分析，有关思考，缺陷分析
   1. 字数一般不少于8000字
   1. 报告的撰写必须落实到Linux内核代码（报告中应明确标出所依据的内核版本号）
== 成员 ==
 * 连刘伟 
 * 张宗兴
 * 庄镇镇
 * 梁鉴东
== 内容 ==
 *linux可执行文件的总的执行过程
 *elf的转载过程(扩展)
= 执行分析 =
 *可执行文件的创建过程 (源代码)编译器(目标文件)连接器
 *[[http://tech.ddvip.com/2008-11/122725806694231.html|linux可执行文件的加载和运行]]
 *Understanding the Linux Kernel,3rd Edition Chapter 20
== 可执行文件格式 ==
 *linux可执行文件格式 1.进程执行的代码和数据 2.将映像正确装入内存并执行的信息
  *ELF (Executable and Linking Format)fs/binfmt_elf.c里 可执行文件和共享库中都广泛使用 和其它格式一样使用同一个加载处理程序
  *a.out fs/binfmt_aout.c里
  *EM86 fs/binfmt_em86.c中 允许在Alpha机器上运行Intel的Linux二进制文件，仿佛它们就是Alpha的本地二进制文件。
  *Java fs/binfmt_java.c中 可以不必每次都定义Java字节码的解释程序就可以执行Java的.class文件。这种机制和脚本中使用的机制类似，通过把.class文件的文件名作为参数传递，处理程序返回执行整型字节码的解释程序。从用户的观点来看，Java二进制文件是作为本地可执行文件处理的。
  *misc(在fs/binfmt_misc.c中)：这是最明智地使用二进制处理程序的方法，这个处理程序通过内嵌的特征数字或者文件名后缀可以识别出各种二进制格式，不过最优秀的特性是它可以在运行期配置，而不是只能在编译期配置。因此，只要遵循其规则，就可以快速的增加对新二进制文件的支持，而不用重新编译内核，也无须重新启动机器。Linux源程序文件中的注释建议最终使用它来取代Java和EM86二进制处理程序。
  *脚本(在fs/binfmt_script.c中)：对于shell脚本、Perl脚本等提供支持。宽松一点地说，所有前面两个字符是“#!”的可执行文件，都归由这个二进制处理程序进行处理。
 *内核保存了支持的二进制格式解释程序的列表，当试图执行一个文件的时候，每一个二进制格式都会被依次尝试，直到判断出可识别的对应的二进制格式为止。
 *和具体的架构有关
 *识别那种
 *允许运行
 *ELF
  *是应用程序二进制接口（Application Binary Interface，ABI）
  *在32位Intel体系结构上的很多操作系统中使用
  *为减少重新编码、重新编译程序的需要
  *可能是obj文件. 可重定位文件（Relocatable File） 包含适合于与其他目标文件链接来创建可执行文件或者共享目标文件的代码和数据。
  *可能是执行文件. 可执行文件（Executable File） 包含适合于执行的一个程序，此文件规定了 exec() 如何创建一个程序的进程映像。
  *可能是动态链接库. 共享目标文件（Shared Object File）包含可在两种上下文中链接的代码和数据。首先链接编辑器可以将它和其它可重定位文件和共享目标文件一起处理，生成另外一个目标文件。其次，动态链接器（Dynamic Linker）可能将它与某个可执行文件以及其它共享目标一起组合，创建进程映像。
 *[[http://www.ibm.com/developerworks/cn/aix/library/au-unixtools.html#list1|linux可执行文件的内容分析]]
 *[[http://industry.ccidnet.com/art/321/20070413/1060987_1.html|UNIX/Linux平台上可执行文件格式分析 ]][[http://bbs.pediy.com/showthread.php?p=574095|linux可执行文件格式]]
 *[[http://blog.chinaunix.net/u2/73569/article_90681.html|一博客]]
 *[[http://www.xxlinux.com/linux/article/accidence/technique/20060930/4770.html|Linux/Unix平台可执行文件格式分析]]
= Understanding the Linux Kernel,3rd Edition Chapter 20 心得 =
== 程序运行 ==
 *程序(装载)->进程
 *简单看法: 不就是装载指令然后指向开始点
 *为了满足灵活性
  *不同的执行文件格式
  *共享库
  *处理命令行和环境变量
 *程序就是一文件
 *公用的成了库 
 *静态库和动态库的区别在于什么时候装载
 *影响程序开始运行:命令行参数(个体)环境变量(相同的重复的)
=== 可执行文件 ===
 *程序的认证与权限
 *命令行参数和环境变量
 *库 c library, math library, x11 library
  *由linker来解决应用
  *程序离开就要系统调用
 *dynamic linker also named ld.so
 *程序地址空间 mm_struct中有分类
  *代码段
  *初始化数据 Initialized data segment
  *未初始化数据 Uninitialized data segment (bss)
  *堆栈段 Stack segment
   
=== 可执行文件格式 ===
=== the exec funchtion ===
