= Pragmatic Version Control_Using Git =
 *三部分：概念 日常操作 管理操作
== Welcome to the Distributed World ==
=== Version Control the Git Way　===
 *Repository代表所有的变更的数据集合
 *upstream Repository代表共同开发的repository
 *pushing向服务器发送变更版本
 *pulling = fetch + merge
 *Git使用分布式模型，本地有repository
 *Git的Repository放在.git文件夹里面
 *Git跟踪的是文件的内容
 *Tag确定Repository的一个历史状态
 *trunk版本的主干部分
 *merge才是人要关注的重点
 *optimistic locking使得可以同时check out但是会对commit进行merge
=== Setting Up Git ===
 *Linux下直接编译获得最新版本
 *Windows下用cgwin或者Git onMSys
 *配置
  *全局变量user.name user.email
 *Git GUI: git-gui gitk
 *Git Help: git-help 官网html
=== Creating Your First Project ===
 *Git Commit使用SHA-1值作为唯一名字 有40个字 但7个基本就够了
 *Status命令查看当前working tree的状态
 *commit前要stage自己要提交的 放在stage area中
 *git中建立branch非常方便 有tag就行
 *两种使用branch的目的 发行 实验新功能
 *Git提供打包功能 容易导出
 *CLONE remote repository一般指定远端地址和本地目录就行了
== Everyday Git ==
=== Adding and Committing: Git Bases ===
 *Git add添加改变到Index也就是staging area中 然后再从中更新到repository中
 *隔一步是为了能够实现自己定制更新内容的功能
 *git add -i使用交互模式来进行add
 *git add -p使用patch模式进行add 
 *Git commit提交到repository中
 *-a 提交之前已经跟踪的
 *Git Status 和 Git diff 观察三部分的改变
 *Git diff --cached比较stage和repository区域
 *Git mv移动文件
 *.gitignore添加忽略文件 .git/info/exclude忽略不去共享
=== Understanding and Using Branches ===
 *everything is branch
 *git branch -m 选项move表示移动一个branch造成移动的表现
 *git branch 显示所有的branch
 *git branch branch名字 新建一个branch
 *git checkout 检出特定的branch
 *git checkout -b branch名字 branch对应的祖先 用于新建加检出
 *merge分类：Straight merges   Squashed commits    cherry-picking commit
 *Straight merges：融合两个branch
 *Squashed commits：将一个branch的变化压缩（squashed）应用到一个branch里。用后要记得commit
 *cherry-picking：将一个commit用于另一个分支 
  *使用 git cherry-pick 命令，更改并且commit 
  *使用 -n 选项阻止commit 
  *可以多次cherry-pick到一个分支后在commit
 *conflict
  *使用的是以行为单位
  *工具：kdiff opendiff
  *命令git mergetool 启动合并工具
 *git branch -d 删除版本命令 会检查是否合并
 *git branch -D 强制删除
 *git branch -m 重命名
== Working with Git's History ==
 *
 *看到81
