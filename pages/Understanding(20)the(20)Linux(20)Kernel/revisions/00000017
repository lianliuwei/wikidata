= Understanding the Linux Kernel =
== Preface ==

 *Overview of the Book

== Introduction ==

 *Hardware Dependency

  *很多平台

 *An Overview of Unix Kernels

  *很好的总体的概念

== Memory Addressing ==

== Processes ==

== Interrupts and Exceptions ==

== Kernel Synchronization ==
== I/O Architecture and Device Drivers ==
=== I/O Architecture ===
 *Device通过bus和CPU连接
 *bus和bus通过bridges连接
 *I/O ports , interfaces, and device controllers
 *I/O Ports
  *地址集 独立的 映射到内存空间
  *交换数据用的方法
  *4大类Port control,status,input,output
  *I/O慢 有时候要等待设备读写完成
  *使用resource结构表示 相关的 Ports
  *在一棵ioport_resource的树中
  *设备驱动用Ports要注册到树里
 *I/O interfaces
  *翻译器作用
  *Custom 类
   *键盘
   *图形 
  *General-purpose 类
   *USB
   *serial口
   *parallel口
   *PCMICIA
   *SCSI
  *device 是 另外的 interface 的情况 转换卡,扩展卡等
  *I/O device controllers
  *映射I/O共享存储器地址
=== The Device Driver Model ===
  *共同任务 
   *Power management
   *Plug and play 和 hot-plugging没有用
   *Hot-plugging
  *2.6提供的 unifying view
  *sysfs
   *用来设备的层次化信息
   *使用链接来减少共同信息
   *文件表示 driver 和 Device 的信息
  *核心数据结构Kobject
   *和sysfs相对应
   *Kobjects放在Kobject里 
   *containers为Kobjects的描述
   *kobject->kset->subsystem
   *要注册
   *文件是动态生成的
=== Components of the Device Driver Model ===
 *Devices
  *device objects
  *设备是有层次关系的 代表依赖 比如 bridge 和 usb设备的关系
  */sys/devices 和物理结构相对应
 *drivers
  *在sys/bus相应的总线上面
  *和bus有较大的关系
 *bus
  *在sys/bus下对应
  *hotplug 要通知应用程序
 *class
  *device的类型 相同用途的设备
=== Device Files ===
 *设备是一种文件
 *block 和 char型
 *major number 相同的driver
 *minor number 标识不同的设备
 *mknod 产生设备文件
 */dev/sda 和 /dev/sda1 的逻辑关系没有用目录表示
 *有纯粹捏造出来的设备 /dev/null
 *udev 为了支持hotplugging
 *VFS 要处理 device files 和 常规文件的区别
=== Device Drivers ===
 *Registration
 *Initialization
 *I/O Operations
 *I/O Shared Memory
 *DMA
== Modules ==
 *可以加载 跟Java语言的包一样
 *放在/lib/modules/下相应的内核下
 *不能动态改变定义
=== Implementation ===
 *加载时从文件系统 放到 内存中
 *module object
 *module 使用了linker的技术
 *内核有 symbol 用来 module载入时从定位
 *module 也可以输出 symbol 使得外部使用
 *module也有依赖关系
=== Linking Modules on Demand ===
 *自动挂载 通过modprode
 *使用depmod启动时产生modules.dep
== 问题 ==
 *写的驱动都是设备controllers的驱动 不是 device的驱动吗
 *一定要通过/Dev下的硬件文件 来访问硬件 sysfs 和 proc 不行吗
 *网卡为什么没有分配设备文件
 *安全是如何实现的
 *可以传递参数
== misc ==
 *文件就是一堆信息的集合
 *driver和device不一样
 *和硬件有关的部分 在 arch 和 include 里, 有分门别类
 *源代码和运行时是有区别的
 *User Mode Linux 是什么东西
 *头文件就目录下几个文件用的话 就放在目录下就行en system programmers want to add new functionality to the Linux kernel, they are faced with a basic
 *arm系列要这样配置 但是 x86不用这么配置呢
 *device 可能 有子 device 如 声卡 有 DSP mixer game port
 *proc 文件系统提供 用户模块访问内核内部数据
 *proc 和 sysfs 有重复
 *hotplugging和 plug and play使得统一的驱动模型变得复杂
== 硬件相关源码 ==
 *arch include 目录下分门别类
 *arm是最多
 *arm下还要再细分
 *arch代表架构 为具体的SoC或者CPU实现
 *asm-为相关的硬件抽象
 *Include多为申明
 *各目录下的和架构有关的代码 都放在 arch下相应的架构里
 *mach-s3c2410 和 mach-smdk2410 是芯片 和 开发板的关系
 *plat 为平台 
