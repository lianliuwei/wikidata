=== 學習 Shell 與 Shell scripts ===
 *BASH shell
==== vim 程式編輯器 ====
 *远程和设置字符界面
 *emacs, pico, nano, joe, 與 vim
 *标准界面
 *Vim功能强大
 *基本上 vi 共分為三種模式，分別是『一般模式』、『編輯模式』與『指令列命令模式』
 *第一部份：一般模式可用的按鈕說明，游標移動、複製貼上、搜尋取代等
  *看资料
 *第二部份：一般模式切換到編輯模式的可用的按鈕說明
  *看资料
 *第三部份：一般模式切換到指令列模式的可用的按鈕說明
  *看资料 
 *『數字』是很有意義的！數字通常代表重複做幾次的意思！ 也有可能是代表去到第幾個什麼什麼的意思
 *救援回復
  *Vim建立一個名為 .filename.swp 的檔案 作为救援恢复用
  *发生情况
   *可能有其他人或程式同時在編輯這個檔案
   *在前一個 vim 的環境中，可能因為某些不知名原因導致 vim 中斷 (crashed)
 *區塊選擇(Visual Block)
  *可以用方块的方式操纵
  *看资料
 *多檔案編輯
  *看资料
 *多視窗功能
  *看资料
 *檔案和視窗的概念是不同的
 *vim 環境設定與記錄： ~/.vimrc, ~/.viminfo
  *记录编辑选项在~/.viminfo
  */.vimrc 使用『 set hlsearch 』或『 :set hlsearch 』，亦即最前面有沒有冒號『 : 』是一样的
 *vim 常用指令示意圖
  *看资料
 *中文編碼的問題
  *来源
   1.  你的 Linux 系統預設支援的語系資料：這與 /etc/sysconfig/i18n 有關；
   2. 你的終端介面 (bash) 的語系： 這與 LANG 這個變數有關；
   3. 你的檔案原本的編碼；
   4. 開啟終端機的軟體，例如在 GNOME 底下的視窗介面。
   *其中 3 和 4最重要   
   *終端機』-->『設定字元編碼』 -->『中文 (正體) (BIG5)』 修正
  *DOS 與 Linux 的斷行字元
   *cat -A 查看所以的字符
   *dos2unix [-kn] file [newfile]
   *unix2dos [-kn] file [newfile]
  *語系編碼轉換
   *iconv -f 原本編碼 -t 新編碼 filename [-o newfile]
   *简体utf8转为繁体utf8:iconv -f utf8 -t big5 vi.utf8 | iconv -f big5 -t gb2312 | iconv -f gb2312 -t utf8 -o vi.gb.utf8
==== 認識與學習 BASH  ====
 *kernel 和 shell 分开 职责不同
 *Linux 的任督二脈： shell 是也！
 *shell种类
  *  /bin/sh (已經被 /bin/bash 所取代)
  * /bin/bash (就是 Linux 預設的 shell
  * /bin/ksh (Kornshell 由 AT&T Bell lab. 發展出來的，相容於 bash)
  * /bin/tcsh (整合 C Shell ，提供更多的功能)
  * /bin/csh (已經被 /bin/tcsh 所取代)
  * /bin/zsh (基於 ksh 發展出來的，功能更強大的 shell)
 *某些服務在運作過程中，會去檢查使用者能夠使用的 shells ，而這些 shell 的查詢就是藉由 /etc/shells 
 */bin/false 是一种特别的shell 不能登录
 *Bash shell 的功能
  *命令編修能力 (history)  ~/.bash_history 記錄的是前一次登入以前所執行過的指令， 而至於這一次登入所執行的指令都被暫存在記憶體中，當你成功的登出系統後，該指令記憶才會記錄到 .bash_history 當中！
  *命令與檔案補全功能： ([tab] 按鍵的好處)
  *命令別名設定功能： (alias)
  *工作控制、前景背景控制： (job control, foreground, background)
  * 程式化腳本： (shell scripts)
  *萬用字元： (Wildcard)
 *type 命令类型 bash专用
  *『 \[Enter] 』 调脱enter键执行的功能
   *Enter] 按鍵是緊接著反斜線 (\) 的，兩者中間沒有其他字元。 因為 \ 僅跳脫『緊接著的下一個字符』而已！
 *Shell 的變數功能
  *變數 用一個簡單的 "字眼" 來取代另一個比較複雜或者是容易變動的資料 
  *變數就是以一組文字或符號等，來取代一些設定或者是一串保留的資料！
  *變數 通常大写
  *影響 bash 環境操作的變數 PATH
  *變數的取用: echo
   *用$ 和 ${變數} 取用 
  *在 bash 當中，當一個變數名稱尚未被設定時，預設的內容是『空』的
  *變數的設定規則
   *變數與變數內容以一個等號『=』來連結
   *等號兩邊不能直接接空白字元
   *變數內容若有空白字元可使用雙引號『"』或單引號『'』將變數內容結合起來，但雙引號內的特殊字元如 $ 等，可以保有原本的特性 單引號內的特殊字元則僅為一般字元 (純文字)
   *跳脫字元『 \ 』 代表特殊符号
   *使用反單引號『`指令`』或 『$(指令)』 表示命令使用
   *"$變數名稱" 或 ${變數} 累加內容，如『PATH="$PATH":/home/bin』
   *若該變數需要在其他子程序執行，則需要以 export 來使變數變成環境變數
   *通常大寫字元為系統預設變數，自行設定變數可以使用小寫字元
   *取消變數的方法為使用 unset
  *cd /lib/modules/$(uname -r)/kernel 先调用了uname
  *環境變數
   *env 觀察環境變數 使用 export 也會是一樣的內容
   *set 觀察所有變數 (含環境變數與自訂變數)
    *PS1：(提示字元的設定)
    *$：(關於本 shell 的 PID)
    *?：(關於上個執行指令的回傳值)
    *OSTYPE, HOSTTYPE, MACHTYPE：(主機硬體與核心的等級)
   *export 分享自己的變數設定給後來呼叫的檔案或其他程序
   *影響顯示結果的語系變數 (locale)
    *你有設定 LANG 或者是 LC_ALL 時，則其他的語系變數就會被這兩個變數所取代
    * /usr/lib/locale/ 所支持的语言
   *變數的有效範圍
   *變數鍵盤讀取、陣列與宣告： read, array, declare
    * read 要讀取來自鍵盤輸入的變數
    *declare / typeset 设置变量的属性
     * - 代表有这属性 + 代表没有这属性
     *-aixr四种属性
    *陣列 (array) 變數類型 是一维变量数组
  *子程序僅會繼承父程序的環境變數， 子程序不會繼承父程序的自訂變數
  *基本上，在 Linux 預設的情況中，使用{大寫的字母}來設定的變數一般為系統內定需要的變數
  *與檔案系統及程序的限制關係： ulimit
