=== 學習 Shell 與 Shell scripts ===
 *BASH shell
==== vim 程式編輯器 ====
 *远程和设置字符界面
 *emacs, pico, nano, joe, 與 vim
 *标准界面
 *Vim功能强大
 *基本上 vi 共分為三種模式，分別是『一般模式』、『編輯模式』與『指令列命令模式』
 *第一部份：一般模式可用的按鈕說明，游標移動、複製貼上、搜尋取代等
  *看资料
 *第二部份：一般模式切換到編輯模式的可用的按鈕說明
  *看资料
 *第三部份：一般模式切換到指令列模式的可用的按鈕說明
  *看资料 
 *『數字』是很有意義的！數字通常代表重複做幾次的意思！ 也有可能是代表去到第幾個什麼什麼的意思
 *救援回復
  *Vim建立一個名為 .filename.swp 的檔案 作为救援恢复用
  *发生情况
   *可能有其他人或程式同時在編輯這個檔案
   *在前一個 vim 的環境中，可能因為某些不知名原因導致 vim 中斷 (crashed)
 *區塊選擇(Visual Block)
  *可以用方块的方式操纵
  *看资料
 *多檔案編輯
  *看资料
 *多視窗功能
  *看资料
 *檔案和視窗的概念是不同的
 *vim 環境設定與記錄： ~/.vimrc, ~/.viminfo
  *记录编辑选项在~/.viminfo
  */.vimrc 使用『 set hlsearch 』或『 :set hlsearch 』，亦即最前面有沒有冒號『 : 』是一样的
 *vim 常用指令示意圖
  *看资料
 *中文編碼的問題
  *来源
   1.  你的 Linux 系統預設支援的語系資料：這與 /etc/sysconfig/i18n 有關；
   2. 你的終端介面 (bash) 的語系： 這與 LANG 這個變數有關；
   3. 你的檔案原本的編碼；
   4. 開啟終端機的軟體，例如在 GNOME 底下的視窗介面。
   *其中 3 和 4最重要   
   *終端機』-->『設定字元編碼』 -->『中文 (正體) (BIG5)』 修正
  *DOS 與 Linux 的斷行字元
   *cat -A 查看所以的字符
   *dos2unix [-kn] file [newfile]
   *unix2dos [-kn] file [newfile]
  *語系編碼轉換
   *iconv -f 原本編碼 -t 新編碼 filename [-o newfile]
   *简体utf8转为繁体utf8:iconv -f utf8 -t big5 vi.utf8 | iconv -f big5 -t gb2312 | iconv -f gb2312 -t utf8 -o vi.gb.utf8
==== 認識與學習 BASH  ====
 *kernel 和 shell 分开 职责不同
 *Linux 的任督二脈： shell 是也！
 *shell种类
  *  /bin/sh (已經被 /bin/bash 所取代)
  * /bin/bash (就是 Linux 預設的 shell
  * /bin/ksh (Kornshell 由 AT&T Bell lab. 發展出來的，相容於 bash)
  * /bin/tcsh (整合 C Shell ，提供更多的功能)
  * /bin/csh (已經被 /bin/tcsh 所取代)
  * /bin/zsh (基於 ksh 發展出來的，功能更強大的 shell)
 *某些服務在運作過程中，會去檢查使用者能夠使用的 shells ，而這些 shell 的查詢就是藉由 /etc/shells 
 */bin/false 是一种特别的shell 不能登录
 *Bash shell 的功能
  *命令編修能力 (history)  ~/.bash_history 記錄的是前一次登入以前所執行過的指令， 而至於這一次登入所執行的指令都被暫存在記憶體中，當你成功的登出系統後，該指令記憶才會記錄到 .bash_history 當中！
  *命令與檔案補全功能： ([tab] 按鍵的好處)
  *命令別名設定功能： (alias)
  *工作控制、前景背景控制： (job control, foreground, background)
  * 程式化腳本： (shell scripts)
  *萬用字元： (Wildcard)
 *type 命令类型 bash专用
  *『 \[Enter] 』 调脱enter键执行的功能
   *Enter] 按鍵是緊接著反斜線 (\) 的，兩者中間沒有其他字元。 因為 \ 僅跳脫『緊接著的下一個字符』而已！
 *Shell 的變數功能
  *變數 用一個簡單的 "字眼" 來取代另一個比較複雜或者是容易變動的資料 
  *變數就是以一組文字或符號等，來取代一些設定或者是一串保留的資料！
  *變數 通常大写
  *影響 bash 環境操作的變數 PATH
  *變數的取用: echo
   *用$ 和 ${變數} 取用 
  *在 bash 當中，當一個變數名稱尚未被設定時，預設的內容是『空』的
  *變數的設定規則
   *變數與變數內容以一個等號『=』來連結
   *等號兩邊不能直接接空白字元
   *變數內容若有空白字元可使用雙引號『"』或單引號『'』將變數內容結合起來，但雙引號內的特殊字元如 $ 等，可以保有原本的特性 單引號內的特殊字元則僅為一般字元 (純文字)
   *跳脫字元『 \ 』 代表特殊符号
   *使用反單引號『`指令`』或 『$(指令)』 表示命令使用
   *"$變數名稱" 或 ${變數} 累加內容，如『PATH="$PATH":/home/bin』
   *若該變數需要在其他子程序執行，則需要以 export 來使變數變成環境變數
   *通常大寫字元為系統預設變數，自行設定變數可以使用小寫字元
   *取消變數的方法為使用 unset
  *cd /lib/modules/$(uname -r)/kernel 先调用了uname
  *環境變數
   *env 觀察環境變數 使用 export 也會是一樣的內容
   *set 觀察所有變數 (含環境變數與自訂變數)
    *PS1：(提示字元的設定)
    *$：(關於本 shell 的 PID)
    *?：(關於上個執行指令的回傳值)
    *OSTYPE, HOSTTYPE, MACHTYPE：(主機硬體與核心的等級)
   *export 分享自己的變數設定給後來呼叫的檔案或其他程序
   *影響顯示結果的語系變數 (locale)
    *你有設定 LANG 或者是 LC_ALL 時，則其他的語系變數就會被這兩個變數所取代
    * /usr/lib/locale/ 所支持的语言
   *變數的有效範圍
   *變數鍵盤讀取、陣列與宣告： read, array, declare
    * read 要讀取來自鍵盤輸入的變數
    *declare / typeset 设置变量的属性
     * - 代表有这属性 + 代表没有这属性
     *-aixr四种属性
    *陣列 (array) 變數類型 是一维变量数组
  *子程序僅會繼承父程序的環境變數， 子程序不會繼承父程序的自訂變數
  *基本上，在 Linux 預設的情況中，使用{大寫的字母}來設定的變數一般為系統內定需要的變數
  *與檔案系統及程序的限制關係： ulimit
   * -a 查看
   *設定了 -f 的檔案大小 只能繼續減小檔案容量，不能增加檔案容量喔！
  *變數內容的刪除、取代與替換
    *從前面開始刪除變數內容 #
     * # ：符合取代文字的『最短的』那一個；
     * ##：符合取代文字的『最長的』那一個
    *從後面向前刪除變數內容 %
    *取代
     *echo ${path/sbin/SBIN}
     *echo ${path//sbin/SBIN}
  *變數的測試與內容替換
   *username=${username-root}
   *还有很多用法 具体看资料
 *命令別名與歷史命令
  *命令別名設定： alias, unalias
   *alias 的定義規則與變數定義規則幾乎相同
   *alias显示所有的定义
  *歷史命令：history
   *和 ~/.bash_history 有关
   *!number 第number条指令
   *!command 符合command 开头的指令
   *!! 上一条指令
   *同一帳號同時多次登入的 history 寫入問題 只有最后的被记录 多重登入有這樣的問題 使用单一的shell
 *Bash Shell 的操作環境
  *指令運作的順序
   1.  以相對/絕對路徑執行指令，例如『 /bin/ls 』或『 ./ls 』；
   2. 由 alias 找到該指令來執行；
   3. 由 bash 內建的 (builtin) 指令來執行；
   4. 透過 $PATH 這個變數的順序搜尋到的第一個指令來執行。
  *bash 的進站與歡迎訊息： /etc/issue, /etc/motd
   *進站畫面 /etc/issue 可以man issue 配合 man mingetty 得到详情 /etc/issue.net给telnet用的
   */etc/motd 使用者登入後取得一些訊息 Message Of The Day
  *bash 的環境設定檔
   *login 與 non-login shell 
    *在于这shell是不是用于login
    *讀取的設定檔資料並不一樣所致    
   */etc/profile (login shell 才會讀)
    *设定/etc/inputrc为INPUTRC 自訂輸入的按鍵功能
    *执行/etc/profile.d/*.sh
   *~/.bash_profile (login shell 才會讀)
    *同样的文件
     1.  ~/.bash_profile
     2. ~/.bash_login
     3. ~/.profile
   *看资料的图
   *source ：讀入環境設定檔的指令
    *source 或小數點 (.) 都可以將設定檔的內容讀進來目前的 shell 環境中
    *不需要登出
    *用于不同環境設定檔
   *~/.bashrc (non-login shell 會讀)
    *non-login shell 時，該 bash 設定檔僅會讀取 ~/.bashrc 而已
   * 其他相關設定檔
    */etc/manpath.config
    *~/.bash_history
    *~/.bash_logout 當我登出 bash 後，系統再幫我做完什麼動作後才離開
   *終端機的環境設定： stty, set
    *stty (setting tty 終端機的意思)
     *^ 表示 [Ctrl] 那個按鍵的意思
    *set 设定bash端機設定值
   *萬用字元與特殊符號
 *資料流重導向
  1. 標準輸入　　(stdin) ：代碼為 0 ，使用 < 或 << ；
  2. 標準輸出　　(stdout)：代碼為 1 ，使用 > 或 >> ；
  3. 標準錯誤輸出(stderr)：代碼為 2 ，使用 2> 或 2>> ；
  *符號 (>>) 將資料累加而不想要將舊的資料刪除
  */dev/null 垃圾桶黑洞裝置與特殊寫法
  *將正確與錯誤資料通通寫入同一個檔案去 2>&1
  *<<代表的是『結束的輸入字元』的意思
  *命令執行的判斷依據： ; , &&, ||
   *cmd ; cmd (不考慮指令相關性的連續指令下達)
   *$? (指令回傳值) 與 && 或 ||
    *||代表错误时才执行
    *不执行 $?=0 繼續向後傳
    *command1 && command2 || command3 条件判断式
 *管線命令 (pipe)
  * 管線命令僅會處理 standard output，對於 standard error output 會予以忽略
  * 管線命令必須要能夠接受來自前一個指令的資料成為 standard input 繼續處理才行。
  *擷取命令： cut, grep
   *cut 將一行訊息當中，取出某部分我們想要的
    *echo $PATH | cut -d ':' -f 3,5 取出第3和5个用:分开
    *export | cut -c 12- 每行取第12字符以后的
    *cut 在處理多空格相連的資料時，可能會比較吃力一點。
   *grep 分析一行訊息， 若當中有我們所需要的資訊，就將該行拿出來
    *用在正規表示法
  *排序命令： sort, wc, uniq
   *sort 行排序
    *cat /etc/passwd | sort -t ':' -k 3
   *uniq 將重複的資料僅列出一個顯示
   *wc 字行字元数目
  *雙向重導向： tee
  *字元轉換命令： tr, col, join, paste, expand
   *tr 刪除一段訊息當中的文字，或者是進行文字訊息的替換
   *col
    *col 經常被利用於將 man page 轉存為純文字檔以方便查閱的功能
   *join 兩個檔案當中，有 "相同資料" 的那一行，才將他加在一起
    *在使用 join 之前，你所需要處理的檔案應該要事先經過排序 (sort) 處理
   *paste 將兩行貼在一起，且中間以 [tab] 鍵隔開
   *expand 將 [tab] 按鍵轉成空白鍵
    *unexpand 將空白轉成 [tab] 的指令
  *分割命令： split
   *cd /tmp; split -b 300k /etc/termcap termcap
   * cat termcap* >> termcapback
  *參數代換： xargs 產生某個指令的參數
   * -e'lp' 是連在一起的，中間沒有空白鍵
  *關於減號 - 的用途
   *- 當成 stdin 或 stdout
